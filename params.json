{"name":"Aquaeronix","tagline":"Linux tools for the Aquero 5 and later PC watercooling components. A fork of aerotools-ng.","body":"\r\n         Aquaeronix: Tools for Accessing the Aquaero5(R) USB Device\r\n        --------------------------------------------------------------\r\n        \r\n       (C) 2012 lynix <lynix47@gmail.com>\r\n       (C) 2013 JinTu <JinTu@praecogito.com>, lynix <lynix47@gmail.com>\r\n       (C) 2014 barracks510 <barracks510@gmail.com>\r\n       (C) 2015 barracks510 <barracks510@gmail.com>\r\n \r\n\r\nSUMMARY\r\n----------------\r\nAquaeronix aims at providing a C interface for accessing the Aquaero5(R) USB\r\ndevice by 'Aqua Computer' (http://www.aqua-computer.de).\r\n\r\nIt consists of a set of functions for data access and conversion, and a\r\ncommand-line tool using these functions as an example implementation.\r\n\r\n\r\nREQUIREMENTS\r\n----------------\r\nUnlike its predecessor, aerotools (which targets the Aquaero(R) 4.00),\r\nAquaeronix currently uses the USB HIDDEV interface provided by the Linux\r\nkernel via the /dev/usb/hiddev? device nodes, so no dependencies for this.\r\n\r\nTo be able to build and run the JSON RPC server, 'aq5rpcd', you need the JSON\r\nRPC server 'jsonrpc-c' by Henrique Gomes (hmng). It is available under MIT\r\nlicense on GitHub: https://github.com/hmng/jsonrpc-c.\r\n\r\n\r\nBUILDING\r\n----------------\r\nTo build the main components of the project simply issue `make` in the project\r\nroot. Compiled binaries will reside in the 'bin' subdirectory. If building for \r\nfirmware version 1027, you must uncomment the appropriate line in the Makefile.\r\n\r\nTo build optional components such as the JSON RPC server 'aq5rpcd', issue\r\n`make all` in the project root. Be sure to install 'jsonrpc-c' first, and point\r\nto its prefix using the JRPC_PREFIX environment variable if not installing to\r\n/usr.\r\n\r\n\r\nSETUP\r\n----------------\r\nTo be able to query the Aquaero5(R) device you have to set appropriate access\r\nrights for the device node.\r\n\r\nYou can either do this manually by identifying the device node using `lsusb`\r\n(looking for the Vendor- and Product-ID), or just install a udev rule like this\r\none:\r\n\r\nATTRS{idVendor}==\"0c70\", ATTRS{idProduct}==\"f001\", GROUP=\"aquaero\", MODE=\"0640\"\r\n\r\nThis will give all members of the 'aquaero' group read access to the device.\r\n\r\nAs the Aquaero5(R) identifies itself as multiple devices (USB keyboard, mouse\r\nand the actual device we want to query) you have to examine which device node\r\nrepresents the data source.\r\n\r\nIn my case, there is /dev/usb/hiddev[0-2] which all match the udev rule provided\r\nabove. The correct one for me is /dev/usb/hiddev0, but I don't know whether it is\r\nalways the first one. Just try as stated under USAGE - if you choose the wrong\r\none there will simply be no output at all.\r\n\r\n\r\nUSAGE: aerocli\r\n----------------\r\naerocli, as stated above, is the example implementation of a command-line tool\r\nthat uses the provided query- and format conversion functions provided by \r\nAquaeronix.\r\n\r\nTo query the first device found (via autodiscovery), simply issue `aerocli`.\r\n\r\nTo query a specific device (if you have more than one attached to your system) \r\nsimply issue `aerocli -d /dev/usb/hiddevX` (see SETUP for the meaning of X).\r\n\r\nTo get a more script-friendly output in the form of 'KEY=VALUE' pairs just add\r\n`-o export`.\r\n\r\nFor more comprehensive output in both default and export modes, use `-a`,\r\ne.g. `-a -o default` or `-a -o export`.\r\n\r\nTo set software sensor values use `-s SENSOR:VALUE` i.e. `-s 1:30.00` or\r\n`-s 1:11.11 -s 2:22.22 -s 3:33.33`.\r\n\r\nNote: Multiple software sensor values must be sent at once. If aerocli is run\r\nagain and any sensor value is set, all other unspecified sensors are set to\r\ndefault (disconnected).\r\n\r\nTo synchronize the Aquaero5(R) time with your system time use `-T`.\r\n\r\nTo set a device/sensor name use `-n REFERENCE:INDEX:VALUE` i.e. `-n \"sensors:1:Sensor 1\"`.\r\nTo get a list of the device/sensor name references and all default names, \r\nsimply omit the argument to `-n`.\r\n \r\n\r\nUSAGE: aq5rpcd\r\n----------------\r\naq5rpcd, as stated above, is a JSON RPC server that allows for easy data polling\r\nin third party applications, possibly over a network connection.\r\n\r\nTo start it, simply call the binary (`./bin/aq5rpcd` from project root).\r\n\r\nTo change the TCP port 'aq5rpcd' listens on (default: 9090), use the '-p'\r\nparameter.\r\n \r\n\r\nBUGS / CONTACT\r\n----------------\r\nFeel free to report any bugs you find using the 'issues' function on GitHub. If\r\nyou wish to contact the authors, you can drop them an email.\r\nFor lynix, you might wish to use his GPG key, #4804CCA9 on keys.gnupg.net\r\n\r\n\r\nLICENSE\r\n----------------\r\nThis program is published under the terms of the GNU General Public License,\r\nversion 3. See the file 'LICENSE' for more information.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}